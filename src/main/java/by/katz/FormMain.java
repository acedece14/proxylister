package by.katz;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;

public class FormMain
        extends JFrame
        implements Callback {

    private boolean running = false;
    private JPanel pnlMain;
    private JButton btnStartCollect;
    private JLabel lblStatus;
    private JTable tableData;


    public FormMain() {

        btnStartCollect.addActionListener(a -> btnStartClick());
        initTable();
        setTitle("Proxy list");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setContentPane(pnlMain);
        pack();
        setSize(380, 500);
        setLocationRelativeTo(null);
        setVisible(true);
        initDataInTable();
    }

    private void btnStartClick() {
        clearTable();
        if (!running) {
            running = true;

            new Thread(() -> {
                lblStatus.setText("Update starting...");
                new ProxyCollector(this);
            }).start();
        } else lblStatus.setText("Already started");
    }

    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        while (model.getRowCount() > 0)
            model.removeRow(0);
    }

    private void initDataInTable() {
        try {
            FileReader fileReader = new FileReader("proxies_good.json");
            List<ProxyItem> goodProxies = new Gson().fromJson(fileReader, new TypeToken<List<ProxyItem>>() {}.getType());
            onComplete(goodProxies);
        } catch (FileNotFoundException e) { lblStatus.setText(e.getLocalizedMessage()); }
    }

    private void initTable() {
        final DefaultTableModel model = (DefaultTableModel) tableData.getModel();
        model.addColumn("Time");
        model.addColumn("Address");
        model.addColumn("Type");
        model.addColumn("C");
        final TableColumnModel columnModel = tableData.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(50);
        columnModel.getColumn(1).setPreferredWidth(180);
        columnModel.getColumn(2).setPreferredWidth(40);
        columnModel.getColumn(3).setPreferredWidth(30);

        tableData.getSelectionModel().addListSelectionListener(event -> {
            String data = tableData.getValueAt(tableData.getSelectedRow(), 1).toString();
            StringSelection stringSelection = new StringSelection(data);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);
            lblStatus.setText("Copied: " + data);
        });
    }

    @Override public void onComplete(List<ProxyItem> goodProxies) {
        running = false;
        lblStatus.setText("Loaded!");
        DefaultTableModel model = (DefaultTableModel) tableData.getModel();

        for (ProxyItem p : goodProxies) {
            Object[] row = new Object[]{
                    p.getResponseTime(),
                    p.getHost() + ":" + p.getPort(),
                    p.getType(),
                    p.getCountry(),
            };
            model.addRow(row);
        }
    }

    @Override public void onGet(int count) {
        lblStatus.setText("Get " + count + ", now checking...");
    }

    @Override public void onError(String error) {

        running = false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        pnlMain = new JPanel();
        pnlMain.setLayout(new BorderLayout(0, 0));
        btnStartCollect = new JButton();
        btnStartCollect.setText("Update list");
        pnlMain.add(btnStartCollect, BorderLayout.NORTH);
        lblStatus = new JLabel();
        lblStatus.setText("Label");
        pnlMain.add(lblStatus, BorderLayout.SOUTH);
        tableData = new JTable();
        pnlMain.add(tableData, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() { return pnlMain; }
}